*****  Request–response *****
Source: https://en.wikipedia.org/wiki/Request%E2%80%93response#:~:text=In%20computer%20science%2C%20request%E2%80%93response,second%20responds%20to%20the%20request.

In computer science, request–response or request–reply is one of the basic methods computers use to communicate with each other in a network, in which the first computer sends a request for some data and the second responds to the request. More specifically, it is a message exchange pattern in which a requestor sends a request message to a replier system, which receives and processes the request, ultimately returning a message in response. It is analogous to a telephone call, in which the caller must wait for the recipient to pick up before anything can be discussed. This is a simple but powerful messaging pattern which allows two applications to have a two-way conversation with one another over a channel; it is especially common in client–server architectures.[1]

For simplicity, this pattern is typically implemented in a purely synchronous fashion, as in web service calls over HTTP, which holds a connection open and waits until the response is delivered or the timeout period expires. However, request–response may also be implemented asynchronously, with a response being returned at some unknown later time. When a synchronous system communicates with an asynchronous system, it is referred to as "sync over async" or "sync/async".[2] This is common in enterprise application integration (EAI) implementations where slow aggregations, time-intensive functions, or human workflow must be performed before a response can be constructed and delivered.

In contrast, one-way computer communication, which is like the push-to-talk or "barge in" feature found on some phones and two-way radios, sends a message without waiting for a response. Sending an email is an example of one-way communication, and another example are fieldbus sensors, such as most CAN bus sensors, which periodically and autonomously send out their data, whether or not any other devices on the bus are listening for it. (Most of these systems use a "listen before talk" or other contention-based protocol so multiple sensors can transmit periodic updates without any pre-coordination.)



*****  How the Web Works, HTTP Request/Response Cycle  *****
Source: https://backend.turing.edu/module2/lessons/how_the_web_works_http

Learning Goals

.Define the ‘Vocabulary’ of the web
.Describe the Request/Response Cycle at a high level
.Describe the parts of a URL
.Explain Verb/Path combinations
.Describe the 5 common HTTP verbs

Vocabulary

.Client
.Server
.URL
.URI
.User
.Request
.Response
.HTTP
.Verb
.Path

*****  What is the Internet? *****

The internet, which for most people is the web…how does that work?

The basis of all web interactions is someone asking for information, and receiving information. In order to ask for and receive any information, we need two players - the asker and the producer. In basic web interactions, the ‘asker’ is a client and the ‘producer’ is a server. Clients send Requests to Servers asking for some kind of information. Upon receiving a Request, Servers send Responses back to the Client.

The Internet is the network between devices that allows clients and servers to exchange this information. HTTP is a set of rules for how this exchange of information happens. Clients and Servers adhere to these rules to ensure that they understand each other’s Requests and Responses.

In the web development world, a client is a web browser, not an individual person. The person using the browser is referred to as a user.

***  Penpal Analogy ***
Okay, that was a lot of information. Let’s break all of this down with a metaphor:

Imagine you’re writing to a penpal. The process would look something like this:
1. Write a letter
2. Specify your penpal’s address
3. Drop the letter in your mailbox
4. The letter goes through the postal system and arrives at your penpal’s mailbox

Your penpal then goes through a very similar set of steps:
1. Read your letter and write a response
2. Specify your address
3. Drop their letter in their mailbox
5. The letter goes through the postal system and arrives at your mailbox

In this analogy:
.You are the Client
.Your penpal is the Server
.Your letter is the Request
.Your penpal’s letter is the Response
.The postal system, the thing responsible for ensuring your letters are delivered, is The Internet

HTTP is the language you write in so that your penpal can understand you. You may write in English because you know you both understand English. If you wrote a letter in Spanish and your penpal only spoke English, they might write you a letter back saying “Please write to me in English”.

Metaphor aside, let’s run through the protocol as executed by computers:
1. You open your browser, the Client, and type in a web address like http://turing.io and hit enter.
2. The browser takes this address and builds an HTTP Request. It addresses it to the Server located at http://turing.io.
3. The Request is handed off to your Internet Service Provider (ISP) (like CenturyLink or Comcast) and they send it through the Internet, mostly a series of wires and fiber optic cables, to the Server
4. The Server reads the Request. It knows how to read it because it is formatted as an HTTP Request.
5. The Server generates an HTTP Response to that Request.
6. The server hands the Response off to their ISP and it goes through the internet to arrive at your computer.
7. Your browser reads the Response. It knows how to read it because it is formatted as an HTTP Response.
8. Your browser displays the data on your machine.

That’s the HTTP Request/Response cycle. At its core, it is a bunch of formatting rules that Clients and Servers use to talk to each other. You can read more on the wikipedia page or the IETF specification.

*****  The Request and Response Cycle  *****
As we start to build out web applications, it is important to be able to visualize the way information flows through the system; typically called the Request/Response Cycle.

First a user gives a client a URL, the client builds a request for information (or resources) to be generated by a server. When the server receives that request, it uses the information included in the request to build a response that contains the requested information. Once built, that response is sent back to the client in the requested format, to be rendered to the user.

It is our job as web developers to build out and maintain servers that can successfully build responses based on standardized requests that will be received. But, what does a standard request look like? We need to know that before we can start building servers that will respond successfully.

The standard, or protocol we use is HTTP.

*****  HTTP Requests and Responses  *****

The HyperText Transfer Protocol gives us rules about how messages should be sent around the Internet. The system that initiates a connection sends a “request”, and the system the answers sends a “response”.

*****  HTTP Request  *****
When a “client” (like a web browser) retrieves information, it sends a payload of data to a server as a “request”. This request has many parts, but for now we are going to focus on the verb and path.

*****  Verb and Path  *****
Every request needs to be able to tell a server what information is requested and how that information is being requested. The what is the path (also know as a URI), indicating what resource this request is referencing.

Examples of a path:

/tasks
/tasks/4
/items/6/reviews
The how is the verb, indicating what actions the server should take regarding the requested resource. While the path can vary greatly based on the application, the verbs follow common patterns. There are 5 common HTTP verbs:

GET - retrieve some information to be READ by the client/user
POST - CREATE a new resource with information contained in the request
PUT - UPDATE an entire resource with information contained in the request
PATCH - UPDATE a part of a resource with information contained in the request
DELETE - DESTROY a resource, typically indicating that it is removed from the database
With these 5 verbs, we send requests that allow us to perform all CRUD functions (create, read, update, destroy) for resources in a database!


HTTP Client :
.Browser level client
.Application level client

*****  Browser level client  *****

Web browsers work as part of a client/server model. The client is the browser which runs on the user's device and makes requests to the Web server, while the server-side is the Web server which sends information back to the browser. The browser then interprets and displays the information on the user's device.


*****  Application level client  *****
Source: https://www.techopedia.com/definition/24319/application-client

What Does Application Client Mean?

An application client is a stand-alone application that runs on the client machine and is configured to work as a J2EE component.

The application client is used to perform tasks, such as system or application administration. It is typicalbundled with strong enterprise components, like Web services and EJB, which are deployed in a remote application server.

Techopedia Explains Application Client

Application clients contrast to Java servlets and Java Server Pages (JSPs), which are server-side components, and EJB components, which are server-side business components.

Because it is written in the Java language, an application client is compiled like any Java language program and directly accesses Enterprise Java Bean (EJB) components. An application client also has the ability to establish an HTTP connection when communicating with a servlet. Furthermore, an application client that is written in a language other than Java can also interact with the J2EE server.

The advantages of an application client vs. a stand-alone Java application are as follows:

. An application client can run in a Web browser or application container.
. An application client is portable, as it is bundled with necessary software in an enterprise archive file.
. Because it has the necessary libraries, an application client can access all J2EE services.